seed_everything: 19

trainer:
  default_root_dir: ./results/image_chexpert_real_real_adv/
  accelerator: gpu
  devices: 1  # Change this number to the number of GPUs you have
  # strategy: ddp
  max_epochs: 100

  callbacks:
  - class_path: lightning.pytorch.callbacks.RichProgressBar
  - class_path: lightning.pytorch.callbacks.EarlyStopping
    init_args:
        monitor: 'val_loss'
        patience: 10
        mode: 'min'  # or 'max' depending on your metric
  - class_path: lightning.pytorch.callbacks.ModelCheckpoint
    init_args:
        monitor: 'val_loss'
        mode: 'min'  # or 'max' depending on your metric
        save_top_k: 20  # save only the best checkpoint
        dirpath: './results/image_chexpert_real_real_adv/checkpoints/'
        filename: 'best_val_loss-{epoch:02d}-{val_loss:.4f}'

  

data: # data.moudle.DataModule
  train_dataset:
    class_path: data.image.dataset_class.CheXpert_Advanced
    init_args:
        csv_path: /fs01/home/hhamidi/projects/stable-diffusion/data/csv_files/train.csv
        image_root_path: /datasets/chexpert/CheXpert-v1.0-small/
        use_upsampling: True
        use_frontal: True
        image_size: 224
        mode: train
        class_index: -1
  val_dataset:
    class_path: data.image.dataset_class.CheXpert_Advanced
    init_args:
        csv_path: /fs01/home/hhamidi/projects/stable-diffusion/data/csv_files/val_from_train.csv
        image_root_path: /datasets/chexpert/CheXpert-v1.0-small/
        use_upsampling: False
        use_frontal: True
        image_size: 224
        mode: valid
        class_index: -1
  test_dataset:
    class_path: data.image.dataset_class.CheXpert_Advanced
    init_args:
        csv_path: /fs01/home/hhamidi/projects/stable-diffusion/data/csv_files/val.csv
        image_root_path: /datasets/chexpert/CheXpert-v1.0-small/
        use_upsampling: False
        use_frontal: True
        image_size: 224
        mode: valid
        class_index: -1


  batch_size: 32
  num_workers: 32
  prediction_on: "test"


model: # models.module.CLS
  model:
    class_path: models.image.models.DensNetWithHead
    init_args:
      hidden_layer_sizes: [768,128]
      dropout_rate: 0.1
      num_classes: 5
  criterion: # torch.nn.BCEWithLogitsLoss
    class_path: torch.nn.BCEWithLogitsLoss
  weight_decay: 0.0
  prediction_on: "test"
  save_probabilities_path: ./results/image_chexpert_real_real_adv/probabilities/
  lr: 0.0001

  #CUDA_VISIBLE_DEVICES=0 python main.py fit -c ./configs/image_chexpert_real_real_adv.yaml